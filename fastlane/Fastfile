# Customise this file, documentation can be found here:
# https://github.com/krausefx/fastlane#customise-the-fastfile
# vim: ft=ruby

require 'chunky_png'


ENV['XCODE_WORKSPACE'] = 'Wikipedia.xcworkspace'

# Returns true if the `NO_RESET` env var is set to 1
def reset_disabled?
  ENV['NO_RESET'] == '1'
end

# Returns true if the `NO_DEPLOY` env var is set to 1
def deploy_disabled?
  ENV['NO_DEPLOY'] == '1'
end

# Runs goals from the project's Makefile, this requires going up to the project directory.
# :args: Additional arguments to be passed to `make`.
# Returns The result of the `make` command
def make(args)
  # Maybe we should write an "uncrustify" fastlane action?...
  Dir.chdir '..' do
    sh 'make ' + args
  end
end

def run_unit_tests
  xctest({
    scheme: 'Wikipedia',
    destination: "platform=iOS Simulator,name=iPhone 6,OS=8.2",
    report_formats: [ "html", "junit" ],
    report_path: "build/reports/iOS82/report.xml",
    clean: nil
  })
end

before_all do
  p ENV
  unless reset_disabled?
    reset_git_repo :force
    ensure_git_status_clean
  end
end

lane :test do
  run_unit_tests
end

lane :alpha do
  run_unit_tests

  # Download the Certificate for signing
  cert

  # Create and/or download the right provisioning profile
  sigh({
    force: true,
    provisioning_name: 'TF Alpha',
    app_identifier: 'org.wikimedia.wikipedia.tfalpha',
  })

  # Create the app in iTunes Connect if needed
  produce({
    produce_username: 'cfloyd@wikimedia.org',
    produce_app_identifier: 'org.wikimedia.wikipedia.tfalpha',
    produce_app_name: 'Wikipedia Alpha',
    produce_language: 'English',
    produce_version: '4.1.1',
    produce_sku: '01985',
  })

  increment_build_number ENV['BUILD_NUMBER'].to_i

  # Create and sign the IPA (and DSYM)
  ipa({
    scheme: 'Wikipedia Alpha',
    configuration: 'Alpha', #Prevents fastlane from passing --configuration "Release" - bug?
    clean: nil, # this means 'Do Clean'. Clean project before building.
    archive: nil, # this means 'Do Archive'. Archive project to the Xcode organizer after building.
    # verbose: nil, # this means 'Do Verbose'.
  })

  unless deploy_disabled?
    # Upload the DSYM to Hockey
    hockey({
      api_token: 'c881c19fd8d0401682c4640b7948ef5e',
      notes: "Changelog",
      notify: 0,
      status: 1, #Means do not make available for download
    })

    # Upload the IPA and DSYM to iTunes Connect
    deliver :testflight, :beta, :skip_deploy, :force
  end
end

lane :beta do
  run_unit_tests

  # Download the Certificate for signing
  cert

  # Create and/or download the right provisioning profile
  sigh({
    force: true,
    provisioning_name: 'TF Beta',
    app_identifier: 'org.wikimedia.wikipedia.tfbeta',
  })

  # Create the app in iTunes Connect if needed
  produce({
    produce_username: 'cfloyd@wikimedia.org',
    produce_app_identifier: 'org.wikimedia.wikipedia.tfbeta',
    produce_app_name: 'Wikipedia Beta',
    produce_language: 'English',
    produce_version: '4.1.1',
    produce_sku: '01984',
  })

  increment_build_number ENV['BUILD_NUMBER'].to_i

  # Create and sign the IPA (and DSYM)
  ipa({
    scheme: 'Wikipedia Beta',
    configuration: 'Beta', #Prevents fastlane from passing --configuration "Release" - bug?
    clean: true,
    archive: nil
  })

  unless deploy_disabled?
    # Upload the DSYM to Hockey
    hockey({
      api_token: 'c881c19fd8d0401682c4640b7948ef5e',
      notes: "Changelog",
      notify: 0,
      status: 1,
    })

    deliver :testflight, :beta, :force
  end
end

lane :appstore do
  run_unit_tests
  snapshot
  frameit
  unless deploy_disabled?
    deliver :skip_deploy, :force
  end
end

# after_all do |lane|
# end

# error do |lane, exception|
# end

def add_text_to_icons(icon_name_prefix, text)
  #Partially Taken from elsewhere in Fastlane

  #find an xcodeproj (ignoring the Cocoapods one)
  xcodeproj_paths = Dir[File.expand_path(File.join(ENV['PWD'], '**/*.xcodeproj'))].reject { |path| /Pods\/.*.xcodeproj/ =~ path }

  unless xcodeproj_paths.count == 0
    xcodeproj_path = xcodeproj_paths.first

    #Open the project
    project = Xcodeproj::Project.open(xcodeproj_path)
    # info_plist_files = project.objects.select { |object| object.isa == 'XCBuildConfiguration' }.map(&:to_hash).map { |object_hash| object_hash['buildSettings'] }.select { |build_settings| build_settings.key?('INFOPLIST_FILE') }.map { |build_settings| build_settings['INFOPLIST_FILE'] }.uniq.map { |info_plist_path| Pathname.new(File.expand_path(File.join(xcodeproj_path, '..', info_plist_path))).relative_path_from(repo_pathname).to_s }

    unless project.targets.count == 0
      #Get the target
      target = project.targets.select { |target| target.class == PBXNativeTarget }.first

      #Add a new shell script build phase and save the project
      build_phase = target.new_shell_script_build_phase 'Process Icons'
      build_phase.shell_script = './scripts/process-icons.sh'
      project.save
    end
  end
end
